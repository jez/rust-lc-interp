use crate::loc::Loc;
use crate::global_state::FileRef;
use crate::parser::{Var, App, Lam, Let, Node};

grammar(file: FileRef);

pub Ident: String = <s:r"[a-z]([A-Za-z_'])*"> => s.to_string();

pub Node: Box<Node> = {
    <begin:@L> "\\" <param:Ident> r"->" <body:Node> <end:@R> =>
      Box::new(Node::Lam (Lam { loc: Loc { begin, end, file }, param, body })),
    <begin:@L> "let" <bind:Ident> r"=" <what:Node> r";" <in_where:Node> <end:@R> =>
      Box::new(Node::Let (Let { loc: Loc { begin, end, file }, bind, what, in_where })),
    <Fact>,
}

pub Fact: Box<Node> = {
    <begin:@L> <f:Fact> <arg:Atom> <end:@R> =>
      Box::new(Node::App (App { loc: Loc { begin, end, file }, f, arg })),
    <Atom>,
}

pub Atom: Box<Node> = {
    "(" <Node> ")",
    <begin:@L> <var:Ident> <end:@R> =>
      Box::new(Node::Var(Var { loc: Loc { begin, end, file }, var })),
}
